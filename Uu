Certainly! Here's an example script using `curl` command to make the API request and `jq` tool to parse the JSON response:

```bash
#!/bin/bash

# Define the URL of the API endpoint
url="https://example.com/api/office_contact_list"

# Make a request to the API endpoint and get the JSON response
response=$(curl -s "$url")

# Loop through each item in the JSON data
echo "$response" | jq -c '.[] | select(.is_manager == 1)' | while read -r item; do
    id=$(echo "$item" | jq -r '.id')
    name=$(echo "$item" | jq -r '.name')
    echo "Hierarchy for $name (ID: $id)"
    echo "-------------------------------"
    get_reportees "$id" "$response" 0
done

# Recursive function to get the hierarchy of reportees for a given manager ID
get_reportees() {
    local manager_id=$1
    local data=$2
    local level=$3
    echo "$data" | jq -c ".[] | select(.manager_id == $manager_id)" | while read -r item; do
        id=$(echo "$item" | jq -r '.id')
        name=$(echo "$item" | jq -r '.name')
        printf "%${level}s- %s (ID: %s)\n" "" "$name" "$id"
This script works similarly to the Python script I provided earlier, but uses `curl` to make the API request and `jq` to parse the JSON response.

The script first makes a `curl` request to the API endpoint and stores the JSON response in the `response` variable. It then uses `jq` to filter the JSON data and select only the objects where `is_manager` is equal to 1. For each manager object, the script extracts the `id` and `name` properties and prints a header for the hierarchy.

The script then calls the `get_reportees` function for the current manager ID, passing in the JSON data and a level of 0. The `get_reportees` function is a recursive function that takes in a manager ID, the JSON data, and a level. It uses `jq` to filter the JSON data and select only the objects where `manager_id` is equal to the given manager ID. For each reportee object, the script extracts the `id` and `name` properties and prints the reportee's name with an appropriate level of indentation. The function then calls itself recursively with the reportee's ID, the JSON data, and a level of `level+1`.

Note that this script assumes that you have `jq` installed on your system. If you don't have `jq` installed, you can install it using your system's package manager or by downloading it from the official website.
